version: "3.8"

services:
  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: portfolio_production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    build:
      context: ./apiApp
      dockerfile: Dockerfile
      args:
        RUBY_VERSION: "3.2.6"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@db:5432/portfolio_production
      RAILS_ENV: production
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      RAILS_LOG_TO_STDOUT: "1"
    ports:
      - "3000:80"
    volumes:
      - api_storage:/rails/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: webApp/Dockerfile
      args:
        API_URL: ${API_URL:-http://localhost:3000}
    environment:
      VITE_API_URL: ${API_URL:-http://localhost:3000}
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  api_storage:

networks:
  default:
    driver: bridge
